import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

// 2. buildscript 추가
buildscript {
	ext {
		queryDslVersion = "5.0.0"
		restdocsApiSpecVersion = '0.18.2'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	// 새로운 추가
	id "org.asciidoctor.jvm.convert" version "3.3.2"

	// 3. openAPI 플러그인 추가 -> Spring Rest Docs 의 결과물을 openAPI3 스펙으로 변환하는 플러그인
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	// 4. swaggerUI 플러그인 추가 -> openAPI3 스펙 기반으로 SwaggerUI 생성
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	// web & security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'


	// MariaDB
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// rest-assured
	testImplementation 'io.rest-assured:rest-assured:5.3.0'

	// restdocs + swagger
	testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'


	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.2'

	// H2 & JDBC(for H2)
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// springboot starter mail
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.0.5'

	// jasypt-spring-boot-starter
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.5'

	// AWS
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.429'
	implementation 'com.amazonaws:aws-java-sdk-secretsmanager:1.12.429'
	implementation 'com.amazonaws:aws-encryption-sdk-java:2.4.0'

	// file-upload
	implementation 'commons-fileupload:commons-fileupload:1.4'

	// google case format
	implementation 'com.google.guava:guava:31.1-jre'

	// ffmpeg for capturing video frame
	implementation group: 'org.bytedeco', name: 'javacv', version: '1.5.7'
	implementation group: 'org.bytedeco', name: 'javacv-platform', version: '1.5.7'

	// Spring AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
}

// 6. openapi3 스펙 생성시 설정 정보
openapi3 {
	servers = [
			//{ url = "http://배포중인 주소" },
			{ url = "http://i10d210.p.ssafy.io/api" },
			{ url = "http://i10d210.p.ssafy.io:8080" }, // 이렇게 List 형태로 여러 server 를 지정해 줄 수 있다.
			{ url = "http://localhost:8080" }
	]
	title = "SSAFY DANCY API" // API 문서 이름
	description = "SSAFY 공통프로젝트 DANCY 에서 사용할 API 문서입니다." // API 상세 정보
	version = "0.0.1" // API 버전
	outputFileNamePrefix = 'open-api-3.0.1'
	format = "json" // 생성될 openAPI3 스펙 파일 타입(여기서는 yaml)

	outputDirectory = 'build/resources/main/static/docs'
}

def querydslDir = 'src/main/generated'

tasks.withType(JavaCompile).configureEach { // 블로그와 달라진 부분. 안 돌아간다면 여길 의심해 볼 것.
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// 10. openapi3가 먼저 실행 - doFrist를 통한 Header 설정
// 이 부분을 통해, opanAPI3 가 먼저 생성되고, 생성된 스펙에 구문을 추가하여 Authorization 에 토큰을 추가할 수 있게 한다.
// 기존 docs에서 requestHeader()로 작성한 테스트코드를 Header로 인식을 하여 입력칸이 생기기는 하나, 실제로 보내지진 않는다.
// 결국 Authorization과 같은 헤더 타입에 토큰을 넣기 위해선 스펙안에 토큰을 넣는 코드를 따로 정의 해주어야 한다.

// 해당 로직의 과정 중에서 doFrist 메서드를 통해 생성된 openAPI3 스펙에 마지막 구문에 헤더 관련 설정을 추가해준다.
// 이는 openAPI3 스펙에 준수하여 모든 API에 Authorization 헤더에 토큰을 넣을 수 있게 설정해준다.

// 참고로 doLast로 하면 해당 구문을 추가하기 전에 SwaggerUI가 생성되기에 적용이 안되니 꼭 doFirst 메서드를 사용하자.
tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
}

tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn 'openapi3'

	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"

	}
}

// 테스트를 통해 생성된 snippets 출력 위치 정의
tasks.register("ext") {
	snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
	systemProperty "JASYPT_KEY", System.getProperty("JASYPT_KEY")
	useJUnitPlatform()

	outputs.dir 'snippetsDir'
}

// 기존에 존재하던 docs 삭제
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asciidoctor 작업을 구성
tasks.named("asciidoctor") {
	inputs.dir 'snippetsDir'
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named("bootJar") {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
	dependsOn(':openapi3')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("$buildDir/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

tasks.named("build") {
	dependsOn copyDocument
}


sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

clean{
	delete file(querydslDir)
}